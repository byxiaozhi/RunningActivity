@page "/admin/member"
@using BootstrapBlazor.Components
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing

<h3 class="mb-5">成员管理</h3>

<div>
    <div id="members" data-list='{"valueNames":["customer","email","mobile_number","city","last_active","joined"],"page":10,"pagination":true}'>
        <div class="row align-items-center justify-content-between g-3 mb-4">
            <div class="col col-auto">
                <div class="search-box">
                    <form class="position-relative">
                        <input class="form-control search-input search" type="search" placeholder="搜索姓名" aria-label="Search" />
                        <span class="fas fa-search search-box-icon"></span>
                    </form>
                </div>
            </div>
            <div class="col-auto">
                <div class="d-flex align-items-center">
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMemberModal"><span class="fas fa-plus me-2"></span>添加成员</button>
                </div>
            </div>
        </div>
        <div class="mx-n4 mx-lg-n6 px-4 px-lg-6 mb-9 bg-body-emphasis border-y mt-2 position-relative top-1">
            <Table TItem="Models.Member" Items="@Items" RenderMode="TableRenderMode.Table">
                <TableColumns>
                    <TableColumn @bind-Field="@context.Name" />
                    <TableColumn @bind-Field="@context.Notes" />
                </TableColumns>
            </Table>
        </div>
    </div>
</div>

<div class="modal fade" id="addMemberModal" tabindex="-1" aria-labelledby="addMemberModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addMemberModalLabel">添加成员</h5><button class="btn btn-close p-1" type="button" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model="addMemberFormValues" OnSubmit="Submit">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="name" class="col-form-label">姓名*</label>
                        <InputText type="text" class="form-control" @bind-Value="addMemberFormValues.Name" placeholder="请输入成员姓名" required />
                    </div>
                    <div class="mb-3">
                        <label for="avatar" class="col-form-label">头像</label>
                        <InputFile type="file" class="@($"form-control {(avatarUploadError ? "is-invalid" : string.Empty)}")" OnChange="OnInputFileChange" @onclick="() => OnInputFileChange(null)" />
                        <div class="invalid-feedback">
                            @avatarUploadErrorMsg
                        </div>
                    </div>
                    @if (avatarBytes != null)
                    {
                        <div class="mb-3 d-flex flex-column">
                            <label for="avatarPreview" class="col-form-label">头像预览</label>
                            <div class="avatar avatar-l" id="avatarPreview">
                                <img class="rounded-circle" src="@($"data:image/png;base64, {System.Convert.ToBase64String(avatarBytes)}")" />
                            </div>
                        </div>
                    }
                    <div class="mb-3">
                        <label for="notes" class="col-form-label">备注</label>
                        <InputTextArea class="form-control" @bind-Value="addMemberFormValues.Notes" rows="3" placeholder="请输入备注" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" type="submit" disabled="@avatarUploading">添加</button>
                    <button class="btn btn-outline-primary" type="button" data-bs-dismiss="modal">取消</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    List<Models.Member> Items = [
        new () { Name = "张三", Notes = "这是张三", Avatar = null },
        new () { Name = "李四", Notes = "这是李四", Avatar = null },
    ];

    public class AddMemberFormValues
    {
        public string Name { get; set; } = string.Empty;

        public string Notes { get; set; } = string.Empty;
    }

    [SupplyParameterFromForm]
    private AddMemberFormValues addMemberFormValues { get; set; } = new();

    private bool avatarUploading;

    private byte[]? avatarBytes;

    private string? avatarUploadErrorMsg;

    private bool avatarUploadError => !string.IsNullOrEmpty(avatarUploadErrorMsg);

    private async Task OnInputFileChange(InputFileChangeEventArgs? e)
    {
        try
        {
            avatarUploadErrorMsg = null;
            avatarBytes = null;
            if (e is null)
            {
                return;
            }
            avatarUploading = true;
            using var fileStream = e.File.OpenReadStream(maxAllowedSize: 2_1024_000);
            using var image = await Image.LoadAsync(fileStream);
            Utilities.Common.ResizeImage(image, 128, 128);
            using var memoryStream = new MemoryStream();
            await image.SaveAsPngAsync(memoryStream);
            avatarBytes = memoryStream.ToArray();
            avatarUploading = false;
        }
        catch (Exception ex)
        {
            avatarUploadErrorMsg = ex.Message;
        }
        finally
        {
            avatarUploading = false;
        }
    }

    private void Submit()
    {

    }

}
